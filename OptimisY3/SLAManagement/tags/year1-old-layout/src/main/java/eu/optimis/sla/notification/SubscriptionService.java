/* 
 * Copyright (c) 2011, Fraunhofer-Gesellschaft
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * 
 * (1) Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the disclaimer at the end.
 *     Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 * 
 * (2) Neither the name of Fraunhofer nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 * 
 * DISCLAIMER
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *  
 */
package eu.optimis.sla.notification;

import java.net.URI;
import java.util.List;

import javax.ws.rs.DELETE;
import javax.ws.rs.FormParam;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

import org.apache.cxf.annotations.DataBinding;
import org.apache.cxf.xmlbeans.XmlBeansDataBinding;

import eu.optimis.subscription.ResourceCollectionDocument;

/**
 * The {@link SubscriptionService} specifies the interface to subscribe to events that are generated during
 * the agreement monitoring process. A subscriber can register for notifications for a particular agreement.
 * If the subscription was successful the id of the new subscription is returned. The subscriber can terminate
 * a subscription by issuing an HTTP DELETE request on the subscription object.
 * 
 * Subscriptions automatically expire when the related agreement is either terminated or completed. In this
 * case there will be no future events for the particular agreement instance.
 * 
 * @author owaeld
 * 
 */
@DataBinding( XmlBeansDataBinding.class )
public interface SubscriptionService
{

    //
    // METHOD DEFINITIONS
    //

    /**
     * The SLA notification service enables consumers to subscribe to events that are generated during the SLA
     * evaluation and assessment process. The SLA monitoring process generates a set of guarantee evaluation
     * events for a particular agreement during each monitoring cycle, one event for each guarantee that is
     * defined in the agreement. These events are send to subscribed notification consumers within one
     * notification message after each monitoring interval.
     * 
     * Failures during the subscription process are specified through the corresponding HTTP response codes.
     * For example if a subscriber tries to register a notification endpoint for an unknown agreement id the
     * subscription service will return a HTTP 404 response which indicates that the referenced agreement was
     * not found. If a subscriber registers a notification endpoint for an known agreement id the subscription
     * service will return a HTTP 200 response which indicates that the subscription was processed
     * successfully.
     * 
     * @param agreementId
     *            the id of the agreement where a notification consumer subscribes to
     * 
     * @param notificationUrl
     *            the notification endpoint url where notification events are sent to
     * 
     * @return the id of the new subscription
     * 
     */
    @POST
    @Produces( MediaType.TEXT_PLAIN )
    URI subscribe( @FormParam( "agreementId" ) String agreementId,
                      @FormParam( "notificationUrl" ) URI notificationUrl );

    /**
     * A HTTP GET request on the subscription service returns the list of subscription that the requester
     * created with this service. The requester can either query details for each subscription or terminate
     * the subscriptions.
     * 
     * @return the references to the subscription generated by the requester
     */
    @GET
    @Produces( "text/uri-list" )
    List<URI> listSubscriptions();
    
    /**
     * Returns the subscription resource identified by the subscriptionId path parameter.
     * 
     * @param subscriptionId
     *            the subscription id
     * 
     * @return the referenced subscription
     */
    @Path( "{subscriptionId}" )
    Subscription getSubscription( @PathParam( "subscriptionId" ) String subscriptionId );
}
