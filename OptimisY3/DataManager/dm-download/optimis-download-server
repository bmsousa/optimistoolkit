#!/usr/bin/env python
# Copyright 2013 National Technical University of Athens
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

import msgpackrpc
import urllib2
import time
import hashlib
from threading import Thread
import sys
import os

sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)

def makeSID(sid):
    h = hashlib.new('sha1')
    h.update(sid)
    s = h.hexdigest()
    newsid = "s" + s[:19]
    return newsid

def downloadThread(sid, url, tasks):
	key = sid + ':' + url
	tasks[sid + ':' + url] = "progress:0"   
        try:
            file_name = url.split('/')[-1]
	    file_name = "/home/vmimages/sids/" + makeSID(sid) + "/" + file_name

            u = urllib2.urlopen(url)
            f = open(file_name, 'wb')
            meta = u.info()
            file_size = int(meta.getheaders("Content-Length")[0])
            print "Downloading: %s Bytes: %s" % (file_name, file_size)

            file_size_dl = 0
            block_sz = 1 * 1024 * 1024   #8192
            while True:
                buffer = u.read(block_sz)
                if not buffer:
                    break
            
                file_size_dl += len(buffer)
                f.write(buffer)
		tasks[key] = "progress:%s" % int((file_size_dl * 100. / file_size))
                status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
                status = status + chr(8)*(len(status)+1)
                print status,
            f.close()
	    tasks[key] = "success"
	    print "Finished Downloading file from ", url 
        except IOError:
            print "Error: Downloading file ", url, " for sid = ", sid
	    tasks[key] = "failure"


class DownloadServer(object):

    def __init__(self):
        self.tasks = {}
	
    def sum(self, x, y):
        return x + y

    def download(self, sid, url):
         t = Thread(target=downloadThread, args=(sid,url,self.tasks,))
         t.start()

    def status(self, sid, url):
	key = sid + ':' + url
	if self.tasks.has_key(key):
		st = self.tasks[key];

		if st == "success" or st == "failure":
			del self.tasks[key]

		return st
	else:
		return "failure"


port = 9090	    
print "Optimis Download Server is Listening on %d " % port

server = msgpackrpc.Server(DownloadServer())
server.listen(msgpackrpc.Address("127.0.0.1", port)) 
server.start()
